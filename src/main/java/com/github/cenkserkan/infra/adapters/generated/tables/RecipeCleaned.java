/*
 * This file is generated by jOOQ.
 */
package com.github.cenkserkan.infra.adapters.generated.tables;


import com.github.cenkserkan.infra.adapters.generated.Keys;
import com.github.cenkserkan.infra.adapters.generated.Public;
import com.github.cenkserkan.infra.adapters.generated.tables.records.RecipeCleanedRecord;

import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecipeCleaned extends TableImpl<RecipeCleanedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.recipe_cleaned</code>
     */
    public static final RecipeCleaned RECIPE_CLEANED = new RecipeCleaned();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecipeCleanedRecord> getRecordType() {
        return RecipeCleanedRecord.class;
    }

    /**
     * The column <code>public.recipe_cleaned.id</code>.
     */
    public final TableField<RecipeCleanedRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.recipe_cleaned.created_at</code>.
     */
    public final TableField<RecipeCleanedRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.recipe_cleaned.updated_at</code>.
     */
    public final TableField<RecipeCleanedRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.recipe_cleaned.title</code>.
     */
    public final TableField<RecipeCleanedRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.recipe_cleaned.url</code>.
     */
    public final TableField<RecipeCleanedRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.recipe_cleaned.fsa_fat</code>.
     */
    public final TableField<RecipeCleanedRecord, String> FSA_FAT = createField(DSL.name("fsa_fat"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.recipe_cleaned.fsa_salt</code>.
     */
    public final TableField<RecipeCleanedRecord, String> FSA_SALT = createField(DSL.name("fsa_salt"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.recipe_cleaned.fsa_saturated</code>.
     */
    public final TableField<RecipeCleanedRecord, String> FSA_SATURATED = createField(DSL.name("fsa_saturated"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.recipe_cleaned.fsa_sugar</code>.
     */
    public final TableField<RecipeCleanedRecord, String> FSA_SUGAR = createField(DSL.name("fsa_sugar"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.recipe_cleaned.instructions</code>.
     */
    public final TableField<RecipeCleanedRecord, String[]> INSTRUCTIONS = createField(DSL.name("instructions"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.recipe_cleaned.energy</code>.
     */
    public final TableField<RecipeCleanedRecord, Double> ENERGY = createField(DSL.name("energy"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.recipe_cleaned.fat</code>.
     */
    public final TableField<RecipeCleanedRecord, Double> FAT = createField(DSL.name("fat"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.recipe_cleaned.protein</code>.
     */
    public final TableField<RecipeCleanedRecord, Double> PROTEIN = createField(DSL.name("protein"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.recipe_cleaned.salt</code>.
     */
    public final TableField<RecipeCleanedRecord, Double> SALT = createField(DSL.name("salt"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.recipe_cleaned.saturated_fat</code>.
     */
    public final TableField<RecipeCleanedRecord, Double> SATURATED_FAT = createField(DSL.name("saturated_fat"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.recipe_cleaned.sugar</code>.
     */
    public final TableField<RecipeCleanedRecord, Double> SUGAR = createField(DSL.name("sugar"), SQLDataType.DOUBLE, this, "");

    private RecipeCleaned(Name alias, Table<RecipeCleanedRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecipeCleaned(Name alias, Table<RecipeCleanedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.recipe_cleaned</code> table reference
     */
    public RecipeCleaned(String alias) {
        this(DSL.name(alias), RECIPE_CLEANED);
    }

    /**
     * Create an aliased <code>public.recipe_cleaned</code> table reference
     */
    public RecipeCleaned(Name alias) {
        this(alias, RECIPE_CLEANED);
    }

    /**
     * Create a <code>public.recipe_cleaned</code> table reference
     */
    public RecipeCleaned() {
        this(DSL.name("recipe_cleaned"), null);
    }

    public <O extends Record> RecipeCleaned(Table<O> child, ForeignKey<O, RecipeCleanedRecord> key) {
        super(child, key, RECIPE_CLEANED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RecipeCleanedRecord> getPrimaryKey() {
        return Keys.RECIPE_CLEANED_PKEY;
    }

    @Override
    public RecipeCleaned as(String alias) {
        return new RecipeCleaned(DSL.name(alias), this);
    }

    @Override
    public RecipeCleaned as(Name alias) {
        return new RecipeCleaned(alias, this);
    }

    @Override
    public RecipeCleaned as(Table<?> alias) {
        return new RecipeCleaned(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeCleaned rename(String name) {
        return new RecipeCleaned(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeCleaned rename(Name name) {
        return new RecipeCleaned(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeCleaned rename(Table<?> name) {
        return new RecipeCleaned(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<UUID, LocalDateTime, LocalDateTime, String, String, String, String, String, String, String[], Double, Double, Double, Double, Double, Double> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super UUID, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String[], ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super UUID, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String[], ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
